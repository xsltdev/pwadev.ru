{"extends":"/samples/v3-base.json","files":{"my-dispatcher.js":{"content":"import {LitElement, html} from 'lit';\n\nclass MyDispatcher extends LitElement {\n  get _input() {\n    return (this.___input ??= this.renderRoot?.querySelector('input') ?? null);\n  }\n  render() {\n    return html`\n      <p>Name: <input></p>\n      <p><button @click=${this._dispatchLogin}>Login</button></p>\n    `;\n  }\n  _dispatchLogin() {\n    const name = this._input.value.trim();\n    if (name) {\n      const options = {\n        detail: {name},\n        bubbles: true,\n        composed: true,\n      };\n      this.dispatchEvent(new CustomEvent('mylogin', options));\n    }\n  }\n}\ncustomElements.define('my-dispatcher', MyDispatcher);\n"},"my-listener.js":{"content":"import {LitElement, html} from 'lit';\nclass MyListener extends LitElement {\n  static properties = {\n    name: {},\n  };\n\n  constructor() {\n    super();\n    this.name = '';\n  }\n  render() {\n    return html`\n      <p @mylogin=${this._loginListener}><slot></slot></p>\n      <p>Login: ${this.name}</p>`;\n  }\n  _loginListener(e) {\n    this.name = e.detail.name;\n  }\n}\ncustomElements.define('my-listener', MyListener);\n"},"index.html":{"content":"<script type=\"module\" src=\"./my-listener.js\"></script>\n<script type=\"module\" src=\"./my-dispatcher.js\"></script>\n\n<my-listener>\n  <my-dispatcher></my-dispatcher>\n</my-listener>\n"}}}