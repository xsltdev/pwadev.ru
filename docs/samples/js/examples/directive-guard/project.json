{"extends":"/samples/base.json","title":"guard directive","description":"Demo exploring use of the guard directive.","section":"Directives","files":{"my-element.js":{"content":"import {LitElement, html} from 'lit';\nimport {guard} from 'lit/directives/guard.js';\nimport {calculateSHA} from './calculate-sha.js';\n\nexport class MyElement extends LitElement {\n  static properties = {\n    value: {state: true},\n    counter: {state: true},\n  };\n\n  constructor() {\n    super();\n    this.value = 'test string';\n    this.counter = 0;\n  }\n\n  get input() {\n    return this.renderRoot?.querySelector('input#value') ?? null;\n  }\n\n  render() {\n    return html`\n      <h3>guard directive example</h3>\n\n      <input id=\"value\" .value=${this.value}>\n      <button @click=${this.updateValue}>Calculate</button><br>\n\n      The SHA for '${this.value}' is:\n      <div>${guard([this.value], () => calculateSHA(this.value))}</div>\n      <hr>\n\n      Incrementing the counter does not recalculate SHA:<br>\n      <button @click=${this.incrementCounter}>Increment: ${\n      this.counter\n    }</button>\n    `;\n  }\n\n  updateValue() {\n    this.value = this.input.value;\n  }\n\n  incrementCounter() {\n    this.counter++;\n  }\n}\ncustomElements.define('my-element', MyElement);\n"},"calculate-sha.js":{"content":"import {until} from 'lit/directives/until.js';\n\n// From https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/digest\nasync function sha256(message) {\n  const msgBuffer = new TextEncoder().encode(message);\n  const hashBuffer = await crypto.subtle.digest('SHA-256', msgBuffer);\n  const hashArray = Array.from(new Uint8Array(hashBuffer));\n  const hashHex = hashArray\n    .map((b) => ('00' + b.toString(16)).slice(-2))\n    .join('');\n  // Add some artificial delay for demo purposes...\n  await new Promise((r) => setTimeout(() => r(), 1000));\n  return hashHex;\n}\n\nexport const calculateSHA = (value) => {\n  return until(sha256(value), 'Calculating sha...');\n};\n"},"index.html":{"content":"<style>\n  body { font-family: sans-serif; }\n</style>\n\n<script type=\"module\" src=\"./my-element.js\"></script>\n\n<my-element></my-element>\n"}}}