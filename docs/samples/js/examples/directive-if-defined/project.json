{"extends":"/samples/base.json","title":"ifDefined directive","description":"Demo exploring use of the ifDefined directive.","section":"Directives","files":{"my-element.js":{"content":"import {LitElement, html} from 'lit';\nimport {ifDefined} from 'lit/directives/if-defined.js';\n\nconst imageInfo = {\n  beach: {domain: 'picsum.photos', id: 100},\n  river: {domain: 'picsum.photos', id: 1015},\n  canyon: {domain: 'picsum.photos', id: 1016},\n};\n\nclass MyElement extends LitElement {\n  static properties = {\n    imageName: {state: true},\n  };\n\n  constructor() {\n    super();\n    this.imageName = 'beach';\n  }\n\n  get input() {\n    return this.renderRoot?.querySelector('input#name') ?? null;\n  }\n\n  render() {\n    // Might be undefined if the input doesn't match one of the image keys\n    const info = imageInfo[this.imageName];\n\n    return html`\n      <h3>ifDefined directive example</h3>\n\n      Type one of 'beach', 'river', or 'canyon':<br>\n      <input id=\"name\" .value=${this.imageName} @input=${this.updateImage}><hr>\n\n      Using ifDefined (src removed when undefined):<br>\n      <img src=\"https://${ifDefined(info?.domain)}/id/${ifDefined(\n      info?.id\n    )}/200/200\"><hr>\n\n      Without ifDefined (will 404 when undefined):<br>\n      <img src=\"https://${info?.domain}/id/${info?.id}/200/200\">\n    `;\n  }\n\n  updateImage() {\n    this.imageName = this.input.value;\n  }\n}\ncustomElements.define('my-element', MyElement);\n"},"index.html":{"content":"<style>\n  body { font-family: sans-serif; }\n</style>\n\n<script type=\"module\" src=\"./my-element.js\"></script>\n\n<my-element></my-element>\n"}}}