{"extends":"/samples/base.json","title":"ref directive","description":"Demo exploring use of the ref directive.","section":"Directives","files":{"my-element.js":{"content":"import {LitElement, html, css} from 'lit';\nimport {ref, createRef} from 'lit/directives/ref.js';\n\nconst loremIpsum = Array(100)\n  .fill(0)\n  .map(() => 'Lorem ipsum dolor sit amet.')\n  .join(' ');\n\nexport class MyElement extends LitElement {\n  static styles = css`\n    .scroll {\n      height: 100px;\n      overflow: auto;\n      padding: 10px;\n      border: 1px solid gray;\n    }\n  `;\n\n  inputRef = createRef();\n\n  render() {\n    return html`\n      Passing ref directive a Ref object that will hold the element in .value:<br>\n      <input ${ref(this.inputRef)}>\n\n      <hr>\n\n      Passing ref directive a change callback\n      <div class=\"scroll\">\n        ${loremIpsum}\n        <p ${ref(this.ensureInView)}>Scrolled into view!</p>\n        ${loremIpsum}\n      </div>\n    `;\n  }\n\n  firstUpdated() {\n    const input = this.inputRef.value;\n    input.focus();\n  }\n\n  ensureInView(element) {\n    requestAnimationFrame(() => element.scrollIntoView(true));\n  }\n}\ncustomElements.define('my-element', MyElement);\n"},"index.html":{"content":"<style>\n  body { font-family: sans-serif; }\n</style>\n\n<script type=\"module\" src=\"./my-element.js\"></script>\n\n<my-element></my-element>\n"}}}