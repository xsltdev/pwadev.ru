{"extends":"/samples/base.json","title":"Change detection","description":"Customizing change detection.","section":"Reactive properties","files":{"date-display.js":{"content":"import {LitElement, html} from 'lit';\nimport {isSameDate} from './date-utils.js';\n\nclass DateDisplay extends LitElement {\n  static properties = {\n    date: {\n      // For wrapper types like Date, simple comparison won't work, because\n      // each Date is a new object\n      hasChanged: (value, oldValue) => {\n        return !isSameDate(value, oldValue);\n      },\n    },\n  };\n\n  get datefield() {\n    return this.renderRoot?.querySelector('#datefield') ?? null;\n  }\n\n  frames = [\n    {backgroundColor: '#fff'},\n    {backgroundColor: '#324fff'},\n    {backgroundColor: '#fff'},\n  ];\n\n  render() {\n    return html`<span id=\"datefield\">${this.date?.toLocaleDateString()}</span>`;\n  }\n\n  updated(changed) {\n    if (changed.has('date')) {\n      this.datefield.animate(this.frames, 1000);\n    }\n  }\n}\ncustomElements.define('date-display', DateDisplay);\n"},"my-element.js":{"content":"import {LitElement, html} from 'lit';\nimport {localDateFromUTC} from './date-utils.js';\nimport './date-display.js';\n\nclass MyElement extends LitElement {\n  static properties = {\n    date: {},\n  };\n\n  render() {\n    return html`\n      <p>Choose a date:\n      <input type=\"date\" @change=${this._dateChanged}></p>\n      <p><button @click=${this._chooseToday}>Choose Today</button></p>\n      <p>Date chosen: <date-display .date=${this.date}></date-display></p>\n    `;\n  }\n\n  _dateChanged(e) {\n    const utcDate = e.target.valueAsDate;\n    if (utcDate) {\n      this.date = localDateFromUTC(utcDate);\n    }\n  }\n\n  _chooseToday() {\n    this.date = new Date();\n  }\n}\ncustomElements.define('my-element', MyElement);\n"},"date-utils.js":{"content":"/**\n * Returns true if the two dates represent the same\n * year, month, and day.\n */\nexport function isSameDate(date1, date2) {\n  return date1?.toLocaleDateString() === date2?.toLocaleDateString();\n}\n\n/**\n * Returns a Date object that displays the correct year, month, and day\n * in the local time zone, given a UTC Date object as returned by input type=\"date\".\n */\nexport function localDateFromUTC(utcDate) {\n  return new Date(\n    utcDate.getUTCFullYear(),\n    utcDate.getUTCMonth(),\n    utcDate.getUTCDate()\n  );\n}\n"},"index.html":{"content":"<!doctype html>\n<html>\n  <head>\n    <script type=\"module\" src=\"./my-element.js\"></script>\n    <style>\n      body {\n        font-family: sans-serif'\n      }\n    </style>\n  </head>\n  <body>\n    <my-element></my-element>\n  </body>\n"}}}