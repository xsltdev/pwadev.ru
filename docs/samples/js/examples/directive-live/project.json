{"extends":"/samples/base.json","title":"live directive","description":"Demo exploring use of the live directive.","section":"Directives","files":{"my-element.js":{"content":"import {LitElement, html} from 'lit';\nimport {live} from 'lit/directives/live.js';\n\nclass MyElement extends LitElement {\n  static properties = {\n    data: {state: true},\n  };\n\n  constructor() {\n    super();\n    this.data = {value: 'test'};\n  }\n\n  get input() {\n    return this.renderRoot?.querySelector('input#value') ?? null;\n  }\n\n  render() {\n    return html`\n      <h3>live directive example</h3>\n\n      Set this value to the inputs below.<br>\n      <input id=\"value\" .value=${this.data.value}>\n      <button @click=${this.commitValue}>Commit</button><hr>\n\n      With live: will update if out of sync with last rendered value<br>\n      <input .value=${live(\n        this.data.value\n      )} placeholder=\"type here, click commit\"><hr>\n\n      Without live: will not update if out of sync with last rendered value<br>\n      <input .value=${this.data.value} placeholder=\"type here, click commit\">\n    `;\n  }\n\n  commitValue() {\n    this.data = {...this.data, value: this.input.value};\n  }\n}\ncustomElements.define('my-element', MyElement);\n"},"index.html":{"content":"<style>\n  body { font-family: sans-serif; }\n</style>\n\n<script type=\"module\" src=\"./my-element.js\"></script>\n\n<my-element></my-element>\n"}}}