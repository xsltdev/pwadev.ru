{"extends":"/samples/base.json","title":"Expression types","description":"Use expressions to set attributes, boolean attributes, properties, text content, and event handlers in a template.","section":"Template concepts","files":{"my-element.js":{"content":"import {LitElement, html} from 'lit';\n\nclass MyElement extends LitElement {\n  static properties = {\n    bodyText: {},\n    label: {},\n    editing: {},\n    value: {},\n  };\n\n  constructor() {\n    super();\n    this.bodyText = 'Text in child expression.';\n    this.label = 'A label, for ARIA.';\n    this.editing = true;\n    this.value = 7;\n  }\n\n  render() {\n    return html`\n      <!-- Child  expression -->\n      <div>Child expression: ${this.bodyText}</div>\n\n      <!-- attribute expression -->\n      <div aria-label=${this.label}>Attribute expression.</div>\n\n      <!-- Boolean attribute expression -->\n      <div>\n        Boolean attribute expression.\n        <input type=\"text\" ?disabled=${!this.editing} />\n      </div>\n\n      <!-- property expression -->\n      <div>\n        Property expression.\n        <input type=\"number\" .valueAsNumber=${this.value} />\n      </div>\n\n      <!-- event listener expression -->\n      <div>\n        Event listener expression.\n        <button @click=\"${this.clickHandler}\">Click</button>\n      </div>\n    `;\n  }\n  clickHandler(e) {\n    this.editing = !this.editing;\n    console.log(e.target);\n  }\n}\ncustomElements.define('my-element', MyElement);\n"},"index.html":{"content":"<!doctype html>\n<head>\n  <script type=\"module\" src=\"./my-element.js\"></script>\n</head>\n<body>\n  <my-element></my-element>\n</body>\n"}},"order":0}