{"extends":"/samples/base.json","title":"repeat directive","description":"Demo exploring use of the repeat directive.","section":"Directives","files":{"my-element.js":{"content":"import {LitElement, html} from 'lit';\nimport {repeat} from 'lit/directives/repeat.js';\n\nclass MyElement extends LitElement {\n  static properties = {\n    items: {state: true},\n  };\n\n  constructor() {\n    super();\n    this.items = [\n      {id: 0, name: 'Justin'},\n      {id: 1, name: 'Steve'},\n      {id: 2, name: 'Kevin'},\n      {id: 3, name: 'Russell'},\n      {id: 4, name: 'Liz'},\n      {id: 5, name: 'Peter'},\n    ];\n  }\n\n  render() {\n    return html`\n      <h3>repeat directive example</h3>\n\n      <button @click=${() => this.sort(1)}>Sort ascending</button>\n      <button @click=${() => this.sort(-1)}>Sort descending</button><hr>\n\n      With keying (DOM including checkbox state moves with items):\n      <ul>\n        ${repeat(\n          this.items,\n          (item) => item.id,\n          (item, index) => html`\n          <li>${index}: <label><input type=\"checkbox\">${item.name}</label></li>`\n        )}\n      </ul><hr>\n\n      Without keying (items are re-used in place, checkbox state does not change):\n      <ul>\n        ${repeat(\n          this.items,\n          (item, index) => html`\n          <li>${index}: <label><input type=\"checkbox\">${item.name}</label></li>`\n        )}\n      </ul>\n\n    `;\n  }\n\n  sort(dir) {\n    this.items = [\n      ...this.items.sort((a, b) => a.name.localeCompare(b.name) * dir),\n    ];\n  }\n}\ncustomElements.define('my-element', MyElement);\n"},"index.html":{"content":"<style>\n  body { font-family: sans-serif; }\n</style>\n\n<script type=\"module\" src=\"./my-element.js\"></script>\n\n<my-element></my-element>\n"}}}