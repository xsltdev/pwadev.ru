{"extends":"/samples/v2-base.json","files":{"x-greeter.js":{"content":"import {LitElement, html} from 'lit';\nimport {msg, updateWhenLocaleChanges} from '@lit/localize';\n\nexport class XGreeter extends LitElement {\n  constructor() {\n    super();\n    updateWhenLocaleChanges(this);\n  }\n  render() {\n    return html`<p>${msg(html`Hello <b>World</b>!`)}</p>`;\n  }\n}\ncustomElements.define('x-greeter', XGreeter);\n"},"locale-picker.js":{"content":"/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {LitElement, html} from 'lit';\nimport {getLocale, setLocaleFromUrl} from './localization.js';\nimport {allLocales} from './locale-codes.js';\nimport {updateWhenLocaleChanges} from '@lit/localize';\n\nconst localeNames = {\n  en: 'English',\n  'es-419': 'Español (Latinoamérica)‎',\n  zh_CN: '中文 (简体)',\n};\n\n// Note we use updateWhenLocaleChanges here so that we're always up to date with\n// the active locale (the result of getLocale()) when the locale changes via a\n// history navigation.\nexport class LocalePicker extends LitElement {\n  constructor() {\n    super();\n    updateWhenLocaleChanges(this);\n  }\n  render() {\n    return html`\n      <select @change=${this.localeChanged}>\n        ${allLocales.map(\n          (locale) => html`<option value=${locale} ?selected=${\n            locale === getLocale()\n          }>\n              ${localeNames[locale]}\n            </option>`\n        )}\n      </select>\n    `;\n  }\n\n  localeChanged(event) {\n    const newLocale = event.target.value;\n    if (newLocale !== getLocale()) {\n      const url = new URL(window.location.href);\n      url.searchParams.set('locale', newLocale);\n      window.history.pushState(null, '', url.toString());\n      setLocaleFromUrl();\n    }\n  }\n}\ncustomElements.define('locale-picker', LocalePicker);\n"},"index.js":{"content":"/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {setLocaleFromUrl} from './localization.js';\nimport {LOCALE_STATUS_EVENT} from '@lit/localize';\nimport {html, render} from 'lit';\nimport './locale-picker.js';\nimport './x-greeter.js';\nimport '@material/mwc-circular-progress';\n\nconst main = document.querySelector('main');\nconst spinner = document.querySelector('#spinner');\n\n// Update the locale to match the URL when the user moves backwards or forwards\n// through history.\nwindow.addEventListener('popstate', () => {\n  setLocaleFromUrl();\n});\n\n// Display a spinner whenever a new locale is loading.\nwindow.addEventListener(LOCALE_STATUS_EVENT, ({detail}) => {\n  if (detail.status === 'loading') {\n    console.log(`Loading new locale: ${detail.loadingLocale}`);\n    spinner.removeAttribute('hidden');\n  } else if (detail.status === 'ready') {\n    console.log(`Loaded new locale: ${detail.readyLocale}`);\n    spinner.setAttribute('hidden', '');\n  } else if (detail.status === 'error') {\n    console.error(\n      `Error loading locale ${detail.errorLocale}: ` + detail.errorMessage\n    );\n    spinner.setAttribute('hidden', '');\n  }\n});\n\n(async () => {\n  try {\n    // Defer first render until our initial locale is ready, to avoid a flash of\n    // the wrong locale.\n    await setLocaleFromUrl();\n  } catch (e) {\n    // Either the URL locale code was invalid, or there was a problem loading\n    // the locale module.\n    console.error(`Error loading locale: ${e.message}`);\n  }\n  render(html` <x-greeter></x-greeter> `, main);\n})();\n"},"index.html":{"content":"<!DOCTYPE html>\n<head>\n  <title>lit-localize runtime example</title>\n  <script type=\"module\" src=\"./index.js\"></script>\n  <style>\n    [hidden] {\n      visibility: hidden;\n    }\n    #spinner {\n      position: absolute;\n    }\n  </style>\n</head>\n<body>\n  <locale-picker></locale-picker>\n  <mwc-circular-progress\n    id=\"spinner\"\n    indeterminate\n    hidden\n  ></mwc-circular-progress>\n  <main></main>\n</body>\n"},"locales/es-419.js":{"content":"// Do not modify this file by hand!\n// Re-generate this file by running lit-localize\n\nimport {html} from 'lit';\n\n/* eslint-disable no-irregular-whitespace */\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nexport const templates = {\n  h3c44aff2d5f5ef6b: html`Hola <b>Mundo</b>!`,\n};\n"},"locales/zh_CN.js":{"content":"// Do not modify this file by hand!\n// Re-generate this file by running lit-localize\n\nimport {html} from 'lit';\n\n/* eslint-disable no-irregular-whitespace */\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nexport const templates = {\n  h3c44aff2d5f5ef6b: html`你好, <b>世界!</b>`,\n};\n"},"localization.js":{"content":"import {configureLocalization} from '@lit/localize';\nimport {sourceLocale, targetLocales} from './locale-codes.js';\n\nexport const {getLocale, setLocale} = configureLocalization({\n  sourceLocale,\n  targetLocales,\n  loadLocale: (locale) => import(`./locales/${locale}.js`),\n});\n\nexport const setLocaleFromUrl = async () => {\n  const url = new URL(window.location.href);\n  const locale = url.searchParams.get('locale') || sourceLocale;\n  await setLocale(locale);\n};\n"},"locale-codes.js":{"content":"// Do not modify this file by hand!\n// Re-generate this file by running lit-localize.\n/**\n * The locale code that templates in this source code are written in.\n */\nexport const sourceLocale = `en`;\n\n/**\n * The other locale codes that this application is localized into. Sorted\n * lexicographically.\n */\nexport const targetLocales = [`es-419`, `zh_CN`];\n\n/**\n * All valid project locale codes. Sorted lexicographically.\n */\nexport const allLocales = [`en`, `es-419`, `zh_CN`];\n"}}}