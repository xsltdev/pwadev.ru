{"extends":"/samples/v2-base.json","files":{"my-dispatcher.js":{"content":"import {LitElement, html} from 'lit';\n\nclass MyDispatcher extends LitElement {\n  static properties = {\n    open: {type: Boolean},\n  };\n\n  constructor() {\n    super();\n    this.open = true;\n  }\n  render() {\n    return html`\n      <p><button @click=${this._notify}>${\n      this.open ? 'Close' : 'Open'\n    }</button></p>\n      <p ?hidden=${!this.open}>Content!</p>\n    `;\n  }\n  async _notify() {\n    this.open = !this.open;\n    await this.updateComplete;\n    const name = this.open ? 'opened' : 'closed';\n    this.dispatchEvent(new CustomEvent(name, {bubbles: true, composed: true}));\n  }\n}\ncustomElements.define('my-dispatcher', MyDispatcher);\n"},"my-listener.js":{"content":"import {LitElement, html} from 'lit';\n\nclass MyListener extends LitElement {\n  static properties = {\n    height: {type: Number},\n  };\n\n  constructor() {\n    super();\n    this.height = null;\n  }\n  render() {\n    return html`\n      <p @opened=${this._listener} @closed=${this._listener}><slot></slot></p>\n      <p>Height: ${this.height}px</p>`;\n  }\n  _listener() {\n    this.height = null;\n  }\n  updated() {\n    if (this.height === null) {\n      requestAnimationFrame(\n        () => (this.height = this.getBoundingClientRect().height)\n      );\n    }\n  }\n}\ncustomElements.define('my-listener', MyListener);\n"},"index.html":{"content":"<script type=\"module\" src=\"./my-listener.js\"></script>\n<script type=\"module\" src=\"./my-dispatcher.js\"></script>\n\n<my-listener>\n  <my-dispatcher></my-dispatcher>\n</my-listener>\n"}}}