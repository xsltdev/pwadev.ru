{"extends":"/samples/v2-base.json","files":{"names-controller.ts":{"content":"import {ReactiveControllerHost} from 'lit';\nimport {initialState, StatusRenderer, Task} from '@lit-labs/task';\nimport * as Names from './names-api.js';\n\nexport class NamesController {\n  host: ReactiveControllerHost;\n  value?: string[];\n  readonly kinds = Names.kinds;\n  private task!: Task<[Names.Kind], Names.Result>;\n  private _kind: Names.Kind = '';\n\n  constructor(host: ReactiveControllerHost) {\n    this.host = host;\n    this.task = new Task<[Names.Kind], Names.Result>(host,\n      async ([kind]: [Names.Kind]) => {\n        if (!kind?.trim()) {\n          return initialState;\n        }\n        try {\n          const response = await fetch(`${Names.baseUrl}${kind}`);\n          const data = await response.json();\n          return data.results as Names.Result;\n        } catch {\n          throw new Error(`Failed to fetch \"${kind}\"`);\n        }\n      }, () => [this.kind]\n    );\n  }\n\n  set kind(value: Names.Kind) {\n    this._kind = value;\n    this.host.requestUpdate();\n  }\n  get kind() { return this._kind; }\n\n  render(renderFunctions: StatusRenderer<Names.Result>) {\n    return this.task.render(renderFunctions);\n  }\n}\n"},"my-element.ts":{"content":"import {LitElement, html} from 'lit';\nimport {customElement} from 'lit/decorators.js';\nimport {NamesController} from './names-controller.js';\nimport * as Names from './names-api.js';\n\n@customElement('my-element')\nexport class MyElement extends LitElement {\n  private names = new NamesController(this);\n\n  render() {\n    return html`\n      <h3>Names List</h3>\n      Kind: <select @change=${this._kindChange}>\n      ${this.names.kinds.map(\n        (k) => html`<option value=${k}>${k}</option>`)\n      }\n    </select>\n    ${this.names.render({\n      complete: (result: Names.Result) => html`\n        <p>List of ${this.names.kind}</p>\n        <ul>${result.map(i => html`<li>${i.name}</li>`)}\n        </ul>\n      `,\n      initial: () => html`<p>Select a kind...</p>`,\n      pending: () => html`<p>Loading ${this.names.kind}...</p>`,\n      error: (e: any) => html`<p>${e}</p>`\n    })}`;\n  }\n\n  private _kindChange(e: Event) {\n    this.names.kind = (e.target as HTMLSelectElement).value as Names.Kind;\n  }\n}\n"},"names-api.ts":{"content":"export type Result = Array<{name: string}>;\nexport type Kind = typeof kinds[number];\n\nexport const baseUrl = 'https://swapi.dev/api/';\n\nexport const kinds = [\n  '',\n  'people',\n  'starships',\n  'species',\n  'planets',\n  // Inserted to demo an error state.\n  'error'\n] as const;\n"},"index.html":{"content":"<!doctype html>\n<html>\n  <head>\n    <script type=\"module\" src=\"./my-element.js\"></script>\n  </head>\n  <body>\n    <my-element></my-element>\n  </body>\n</html>\n"}},"previewHeight":"150px"}