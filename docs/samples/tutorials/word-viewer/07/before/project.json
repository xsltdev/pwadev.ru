{"extends":"/samples/base.json","files":{"word-viewer.ts":{"selected":true,"content":"import { css, html, LitElement } from 'lit';\nimport { customElement, property, state } from 'lit/decorators.js';\nimport { classMap } from 'lit/directives/class-map.js';\n\n@customElement('word-viewer')\nclass WordViewer extends LitElement {\n  static styles = css`\n    :host {\n      background-color: white;\n      color: violet;\n      cursor: pointer;\n      display: block;\n    }\n    pre {\n      padding: 0.2em;\n    }\n    /* TODO: Add .backwards styles */\n  `;\n\n  @state() private playDirection: -1 | 1 = 1;\n  @state() private idx = 0;\n  @property() words = 'initial value';\n\n  private intervalTimer?: number;\n\n  connectedCallback() {\n    super.connectedCallback();\n    this.intervalTimer = setInterval(this.tickToNextWord, 1000);\n  }\n\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    clearInterval(this.intervalTimer);\n    this.intervalTimer = undefined;\n  }\n\n  render() {\n    const splitWords = this.words.split('.');\n    const idx = ((this.idx % splitWords.length) + splitWords.length) % splitWords.length;\n    const word = splitWords[idx];\n    return html`<pre\n      class=\"TODO: Use classMap expression\"\n      @click=${this.switchPlayDirection}\n    >${word}</pre>`;\n  }\n\n  tickToNextWord = () => { this.idx += this.playDirection; };\n\n  switchPlayDirection() {\n    this.playDirection *= -1;\n  }\n}\n\n"},"index.html":{"content":"<script type=\"module\" src=\"word-viewer.js\"></script>\n\n<word-viewer words=\"ðŸ‘‹.from.html\"></word-viewer>\n"}}}