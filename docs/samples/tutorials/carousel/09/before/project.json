{"extends":"../../carousel-base.json","files":{"motion-carousel.ts":{"selected":true,"content":"import {LitElement, html, PropertyValues, noChange} from 'lit';\nimport {customElement, property, query} from 'lit/decorators.js';\nimport {animate} from '@lit-labs/motion';\nimport {styleMap} from 'lit/directives/style-map.js';\nimport {styles} from './styles.js';\n\n@customElement('motion-carousel')\nexport class MotionCarousel extends LitElement {\n  static styles = styles;\n\n  @query('slot[name=\"selected\"]', true)\n  private selectedSlot!: HTMLSlotElement;\n\n  @query('slot[name=\"previous\"]', true)\n  private previousSlot!: HTMLSlotElement;\n\n  @property({type: Number})\n  selected = 0;\n\n  private left = 0;\n  private selectedInternal = 0;\n\n  get maxSelected() {\n    return this.childElementCount - 1;\n  }\n\n  hasValidSelected() {\n    return this.selected >= 0 && this.selected <= this.maxSelected;\n  }\n\n  render() {\n    const p = this.selectedInternal;\n    const s = (this.selectedInternal =\n      this.hasValidSelected() ? this.selected : this.selectedInternal);\n    const shouldMove = this.hasUpdated && s !== p;\n    const atStart = p === 0;\n    const toStart = s === 0;\n    const atEnd = p === this.maxSelected;\n    const toEnd = s === this.maxSelected;\n    const shouldAdvance = shouldMove &&\n      (atEnd ? toStart : atStart ? !toEnd : s > p);\n    const delta = (shouldMove ? Number(shouldAdvance) || -1 : 0) * 100;\n    this.left -= delta;\n    const animateLeft = `${this.left}%`;\n    const selectedLeft = `${-this.left}%`;\n    const previousLeft = `${-this.left - delta}%`;\n    const w = 100 / this.childElementCount;\n    const indicatorLeft = `${w * s}%`;\n    const indicatorWidth = `${w}%`;\n    return html`\n      <div class=\"fit\"\n        ${animate()}\n        @click=${this.clickHandler}\n        style=${styleMap({left: animateLeft})}>\n        <div class=\"fit\" style=${\n          shouldMove ? styleMap({left: previousLeft}) : noChange\n        }>\n          <slot name=\"previous\"></slot>\n        </div>\n        <div class=\"fit selected\" style=${\n          shouldMove ? styleMap({left: selectedLeft}) : noChange\n        }>\n          <slot name=\"selected\"></slot>\n        </div>\n      </div>\n      <div class=\"bar\"><div class=\"indicator\"\n          ${animate()}\n          style=${styleMap({left: indicatorLeft, width: indicatorWidth})}></div></div>\n    `;\n  }\n\n  private previous = -1;\n  protected async updated(changedProperties: PropertyValues) {\n    if ((changedProperties.has('selected') || this.previous === -1) && this.hasValidSelected()) {\n      this.updateSlots();\n      this.previous = this.selected;\n    }\n  }\n\n  private updateSlots() {\n    // unset old slot state\n    this.selectedSlot.assignedElements()[0]?.removeAttribute('slot');\n    this.previousSlot.assignedElements()[0]?.removeAttribute('slot');\n    // set slots\n    this.children[this.previous]?.setAttribute('slot', 'previous');\n    this.children[this.selected]?.setAttribute('slot', 'selected');\n  }\n\n  private clickHandler(e: MouseEvent) {\n    const i = this.selected + (Number(!e.shiftKey) || -1);\n    this.selected = i > this.maxSelected ? 0 : i < 0 ? this.maxSelected : i;\n    const change = new CustomEvent('change',\n      {detail: this.selected, bubbles: true, composed: true});\n    this.dispatchEvent(change);\n  }\n\n}\n"},"index.html":{"content":"<script type=\"module\" src=\"./motion-carousel.js\"></script>\n\n<h2>motion-carousel</h2>\n<motion-carousel id=\"carousel\">\n  <img src=\"https://picsum.photos/seed/1/200\">\n  <img src=\"https://picsum.photos/seed/2/200\">\n  <img src=\"https://picsum.photos/seed/3/200\">\n  <img src=\"https://picsum.photos/seed/4/200\">\n  <img src=\"https://picsum.photos/seed/5/200\">\n  <img src=\"https://picsum.photos/seed/6/200\">\n</motion-carousel>\n\n<style>\n  body {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    font-family: sans-serif;\n  }\n\n  #carousel {\n    width: 200px;\n    height: 200px;\n    user-select: none;\n  }\n\n  #carousel:not(:defined) > * {\n    display: none;\n  }\n</style>\n\n"},"styles.ts":{"content":"/* playground-fold */\nimport {css} from 'lit';\n\nexport const styles = css`\n  :host {\n    display: inline-block;\n    overflow: hidden;\n    position: relative;\n    /* Defaults */\n    width: 200px;\n    height: 200px;\n    border-radius: 4px;\n    background: gainsboro;\n    cursor: pointer;\n  }\n\n  .fit {\n    position: relative;\n    height: 100%;\n    width: 100%;\n  }\n\n  .selected {\n    top: -100%;\n  }\n\n  ::slotted(*) {\n    box-sizing: border-box;\n    width: 100%;\n    height: 100%;\n  }\n\n  .bar {\n    position: absolute;\n    bottom: 8px;\n    width: calc(100% - 16px);\n    left: 8px;\n    height: 8px;\n    background: rgba(200, 200, 200, 0.5);\n    border-radius: 8px;\n    pointer-events: none;\n  }\n\n  .indicator {\n    position: relative;\n    display: inline-block;\n    height: 100%;\n    width: 8px;\n    border-radius: 8px;\n    background: #eee;\n  }`;\n/* playground-fold-end */\n"}}}