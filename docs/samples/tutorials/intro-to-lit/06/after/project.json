{"extends":"/samples/base.json","files":{"todo-list.ts":{"content":"import {LitElement, html, css} from 'lit';\nimport {customElement, state, query} from 'lit/decorators.js';\n\ntype ToDoItem = {\n  text: string,\n  completed: boolean\n}\n\n@customElement('todo-list')\nexport class ToDoList extends LitElement {\n  static styles = css`\n    .completed {\n      text-decoration-line: line-through;\n      color: #777;\n    }\n  `;\n\n  @state()\n  private _listItems = [\n    { text: 'Make to-do list', completed: true },\n    { text: 'Add some styles', completed: true }\n  ];\n\n  render() {\n    return html`\n      <h2>To Do</h2>\n      <ul>\n        ${this._listItems.map((item) =>\n          html`\n            <li\n                class=${item.completed ? 'completed' : ''}\n                @click=${() => this.toggleCompleted(item)}>\n              ${item.text}\n            </li>`\n        )}\n      </ul>\n      <input id=\"newitem\" aria-label=\"New item\">\n      <button @click=${this.addToDo}>Add</button>\n    `;\n  }\n\n  toggleCompleted(item: ToDoItem) {\n    item.completed = !item.completed;\n    this.requestUpdate();\n  }\n\n  @query('#newitem')\n  input!: HTMLInputElement;\n\n  addToDo() {\n    this._listItems = [...this._listItems,\n        {text: this.input.value, completed: false}];\n    this.input.value = '';\n  }\n}\n"},"index.html":{"content":"<!DOCTYPE html>\n<html>\n  <head>\n    <script type=\"module\" src=\"todo-list.js\"></script>\n    <style>\n      body {\n        font-family: 'Open Sans', sans-serif;\n        font-size: 1.5em;\n        padding-left: 0.5em;\n      }\n    </style>\n  </head>\n  <body>\n    <todo-list></todo-list>\n  </body>\n</html>\n"}}}