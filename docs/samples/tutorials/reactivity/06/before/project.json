{"extends":"/samples/base.json","files":{"index.html":{"content":"<!DOCTYPE html>\n<html>\n  <head>\n    <script type=\"module\" src=\"bye-element.js\"></script>\n  </head>\n  <body>\n    <bye-element></bye-element>\n  </body>\n</html>\n"},"bye-element.ts":{"selected":true,"content":"import {LitElement, html, css, PropertyValues} from 'lit';\nimport {customElement, state, query} from 'lit/decorators.js';\n\n@customElement('bye-element')\nexport class ByeElement extends LitElement {\n  static styles = css`\n    :host {\n      display: block;\n    }\n    #message {\n      position: fixed;\n      background-color: cornflowerblue;\n      color: white;\n      padding: 10px;\n    }\n  `;\n  @state()\n  _showMessage = false;\n\n  @query('#message')\n  _message!: HTMLDivElement;\n\n  render() {\n    return html`\n      <button @click=${() => this._showMessage = !this._showMessage}>Click me</button>\n      <div id=\"message\" ?hidden=${!this._showMessage}>\n        That's all folks!\n      </div>\n    `;\n  }\n\n  protected updated(changedProperties: PropertyValues<this>): void {\n    if (changedProperties.has('_showMessage')) {\n      const rect = this._message.getBoundingClientRect();\n      const startingX = 0 - rect.width;\n      this._message.animate([\n        { transform: `translateX(${startingX}px) scale(0.1)` },\n        { transform: `translateX(0) translateY(0) scale(1)` }\n      ], {\n        duration: 500,\n        easing: 'ease-out',\n      });\n    }\n  }\n}\n"}}}