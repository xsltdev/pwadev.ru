{"extends":"/samples/base.json","files":{"my-element.ts":{"content":"import {html, css, LitElement} from 'lit';\nimport {customElement} from 'lit/decorators.js';\nimport {range} from 'lit/directives/range.js';\nimport {map} from 'lit/directives/map.js';\n\n@customElement('my-element')\nclass MyElement extends LitElement {\n  static styles = css`\n    /* playground-fold */\n    :host {\n      display: block;\n      width: 400px;\n      height: 400px;\n    }\n    #board {\n      display: grid;\n      grid-template-columns: repeat(8, 1fr);\n      grid-template-rows: repeat(8, 1fr);\n      border: 2px solid #404040;\n      box-sizing: border-box;\n      height: 100%;\n    }\n    #board > div {\n      padding: 2px;\n    }\n    .black {\n      color: #ddd;\n      background: black;\n    }\n    .white {\n      color: gray;\n      background: white;\n    }\n    /* playground-fold-end */\n\n  `;\n\n  render() {\n    return html`\n      <p>Let's play a game!</p>\n      <div id=\"board\">\n        ${map(range(8), (row) => map(range(8), (col) => html`\n          <div class=\"${getColor(row, col)}\">${getLabel(row, col)}</div>\n        `))}\n      </div>\n    `;\n  }\n}\n\nconst getColor = (row: number, col: number) =>\n  (row + col) % 2 ? \"black\" : \"white\";\nconst getLabel = (row: number, col: number) =>\n  `${String.fromCharCode(65 + col)}${8 - row}`;\n"},"index.html":{"content":"<!DOCTYPE html>\n<html>\n  <head>\n    <script type=\"module\" src=\"my-element.js\"></script>\n    <style>\n      body {\n        font-family: 'Open Sans', sans-serif;\n        padding-left: 0.5em;\n      }\n    </style>\n  </head>\n  <body>\n    <my-element></my-element>\n  </body>\n</html>\n"}}}