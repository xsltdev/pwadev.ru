{"extends":"../../tooltip-base.json","files":{"simple-tooltip.ts":{"hidden":true,"content":"/* playground-fold */\nimport {html, css, LitElement} from 'lit';\nimport {customElement, property} from 'lit/decorators.js';\nimport {Directive, DirectiveParameters, directive} from 'lit/directive.js';\nimport {ElementPart, render} from 'lit';\n\n// Positioning library\nimport {computePosition, autoPlacement, offset, shift} from '@floating-ui/dom';\n\n// Events to turn on/off the tooltip\nconst enterEvents = ['pointerenter', 'focus'];\nconst leaveEvents = ['pointerleave', 'blur', 'keydown', 'click'];\n\n@customElement('simple-tooltip')\nexport class SimpleTooltip extends LitElement {\n\n  // Lazy creation\n  static lazy(target: Element, callback: (target: SimpleTooltip) => void) {\n    const createTooltip = () => {\n      const tooltip = document.createElement('simple-tooltip') as SimpleTooltip;\n      callback(tooltip);\n      target.parentNode!.insertBefore(tooltip, target.nextSibling);\n      tooltip.show();\n      // We only need to create the tooltip once, so ignore all future events.\n      enterEvents.forEach(\n        (eventName) => target.removeEventListener(eventName, createTooltip));\n    };\n    enterEvents.forEach(\n      (eventName) => target.addEventListener(eventName, createTooltip));\n  }\n\n  static styles = css`\n    :host {\n      /* Position fixed to help ensure the tooltip is \"on top\" */\n      position: fixed;\n      border: 1px solid darkgray;\n      background: #ccc;\n      padding: 4px;\n      border-radius: 4px;\n      display: inline-block;\n      pointer-events: none;\n\n      /* Animate in */\n      opacity: 0;\n      transform: scale(0.75);\n      transition: opacity, transform;\n      transition-duration:  0.33s;\n    }\n\n    :host([showing]) {\n      opacity: 1;\n      transform: scale(1);\n    }\n  `;\n\n  // Attribute for styling \"showing\"\n  @property({reflect: true, type: Boolean})\n  showing = false;\n\n  // Position offset\n  @property({type: Number})\n  offset = 4;\n\n  constructor() {\n    super();\n    // Finish hiding at end of animation\n    this.addEventListener('transitionend', this.finishHide);\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    // Setup target if needed\n    this.target ??= this.previousElementSibling;\n    // Ensure hidden at start\n    this.finishHide();\n  }\n\n  // Target for which to show tooltip\n  _target: Element|null = null;\n  get target() {\n    return this._target;\n  }\n  set target(target: Element|null) {\n    // Remove events from existing target\n    if (this.target) {\n      enterEvents.forEach(name => this.target!.removeEventListener(name, this.show));\n      leaveEvents.forEach(name => this.target!.removeEventListener(name, this.hide));\n    }\n    if (target) {\n      // Add events to new target\n      enterEvents.forEach(name => target!.addEventListener(name, this.show));\n      leaveEvents.forEach(name => target!.addEventListener(name, this.hide));\n    }\n    this._target = target;\n  }\n\n  show = () => {\n    this.style.cssText = '';\n    computePosition(this.target, this, {\n      strategy: 'fixed',\n      middleware: [\n        offset(this.offset),\n        shift(),\n        autoPlacement({allowedPlacements: ['top', 'bottom']})\n      ],\n    }).then(({x, y}: {x: number, y: number}) => {\n      this.style.left = `${x}px`;\n      this.style.top = `${y}px`;\n    });\n    this.showing = true;\n  };\n\n  hide = () => {\n    this.showing = false;\n  };\n\n  finishHide = () => {\n    if (!this.showing) {\n      this.style.display = 'none';\n    }\n  };\n\n  render() {\n    return html`<slot></slot>`;\n  }\n\n}\n\nclass TooltipDirective extends Directive {\n  didSetupLazy = false;\n  tooltipContent?: unknown;\n  part?: ElementPart;\n  tooltip?: SimpleTooltip;\n  render(tooltipContent: unknown = '') {}\n  update(part: ElementPart, [tooltipContent]: DirectiveParameters<this>) {\n    this.tooltipContent = tooltipContent;\n    this.part = part;\n    if (!this.didSetupLazy) {\n      this.setupLazy();\n    }\n    if (this.tooltip) {\n      this.renderTooltipContent();\n    }\n  }\n  setupLazy() {\n    this.didSetupLazy = true;\n    SimpleTooltip.lazy(this.part!.element, (tooltip: SimpleTooltip) => {\n      this.tooltip = tooltip;\n      this.renderTooltipContent();\n    });\n  }\n  renderTooltipContent() {\n    render(this.tooltipContent, this.tooltip!, this.part!.options);\n  }\n}\n\nexport const tooltip = directive(TooltipDirective);\n\n/* playground-fold-end */\n"},"my-content.ts":{"selected":true,"content":"import {html, css, LitElement} from 'lit';\nimport {customElement, property} from 'lit/decorators.js';\nimport './simple-tooltip.js';\n\n@customElement('my-content')\nexport class MyContent extends LitElement {\n  /* playground-fold */\n  static styles = css`\n    .box {\n      height: 80px;\n      width: 80px;\n      display: inline-flex;\n      align-items: center;\n      justify-content: center;\n      background: steelblue;\n    }\n\n    .right {\n      position: absolute;\n      right: 16px;\n    }\n\n    .container, #greeting {\n      display: inline-flex;\n      align-items: center;\n    }\n\n    .icon {\n      font-family: 'Material Icons';\n      font-size: 20px;\n      margin: 0 0.25em;\n      cursor: pointer;\n    }\n  `;\n\n  @property()\n  name = 'Katara';\n  /* playground-fold-end */\n\n  render() {\n    return html`\n      <h3>Welcome</h3>\n      <p>Who are you?\n        <span class=\"container\">\n          <input .value=${this.name} @input=${this._inputChange}>\n          <span class=\"icon\">help_outline</span>\n        </span>\n        <simple-tooltip>Enter your name...</simple-tooltip>\n      </p>\n      <p>\n        <span id=\"greeting\">Hello, ${this.name}! <span class=\"icon\">info_outline</span></span>\n        <simple-tooltip>${this.name}, there's coffee available in the lounge.</simple-tooltip>\n      </p>\n\n      <h3>Some boxes hinted with tooltips</h3>\n      <section>\n        <div class=\"box\">1</div>\n        <simple-tooltip>This is box 1.</simple-tooltip>\n        <div class=\"box\">2</div>\n        <simple-tooltip>This is box 2.</simple-tooltip>\n        <div class=\"box right\">3</div>\n        <simple-tooltip>This is box 3 and it's way off on its own.</simple-tooltip>\n      </section>\n    `;\n  }\n\n  private _inputChange(e: InputEvent) {\n    this.name = (e.target as HTMLInputElement).value;\n  }\n}\n"},"index.html":{"hidden":true,"content":"<!DOCTYPE html>\n<head>\n  <style>\n    body {\n      font-family: sans-serif;\n    }\n  </style>\n  <link href=\"https://fonts.googleapis.com/icon?family=Material+Icons\"\n  rel=\"stylesheet\">\n  <script type=\"module\" src=\"./my-content.js\"></script>\n</head>\n<body>\n  <my-content></my-content>\n</body>\n"}}}