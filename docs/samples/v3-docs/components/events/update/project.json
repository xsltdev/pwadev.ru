{"extends":"/samples/v3-base.json","files":{"my-dispatcher.ts":{"content":"import {LitElement, html} from 'lit';\nimport {customElement, property} from 'lit/decorators.js';\n\n@customElement('my-dispatcher')\nclass MyDispatcher extends LitElement {\n  @property({type: Boolean}) open = true;\n  protected render() {\n    return html`\n      <p><button @click=${this._notify}>${this.open ? 'Close' : 'Open'}</button></p>\n      <p ?hidden=${!this.open}>Content!</p>\n    `;\n  }\n  private async _notify() {\n    this.open = !this.open;\n    await this.updateComplete;\n    const name = this.open ? 'opened' : 'closed';\n    this.dispatchEvent(new CustomEvent(name, {bubbles: true, composed: true}));\n  }\n}\n"},"my-listener.ts":{"content":"import {LitElement, html} from 'lit';\nimport {customElement, property} from 'lit/decorators.js';\n\n@customElement('my-listener')\nclass MyListener extends LitElement {\n  @property({type: Number}) height: number|null = null;\n  protected render() {\n    return html`\n      <p @opened=${this._listener} @closed=${this._listener}><slot></slot></p>\n      <p>Height: ${this.height}px</p>`;\n  }\n  private _listener() {\n    this.height = null;\n  }\n  protected updated() {\n    if (this.height === null) {\n      requestAnimationFrame(() => this.height = this.getBoundingClientRect().height);\n    }\n  }\n}\n"},"index.html":{"content":"<script type=\"module\" src=\"./my-listener.js\"></script>\n<script type=\"module\" src=\"./my-dispatcher.js\"></script>\n\n<my-listener>\n  <my-dispatcher></my-dispatcher>\n</my-listener>\n"}}}