{"extends":"/samples/v3-base.json","files":{"highlightable.ts":{"content":"/* playground-fold */\nimport {LitElement, css, html} from 'lit';\nimport {classMap} from 'lit/directives/class-map.js';\nimport {property} from 'lit/decorators/property.js';\n\ntype Constructor<T> = new (...args: any[]) => T;\n\nexport declare class HighlightableInterface {\n  highlight: boolean;\n  renderHighlight(content: unknown): unknown;\n}\n/* playground-fold-end */\n\nexport const Highlightable =\n  <T extends Constructor<LitElement>>(superClass: T) => {\n    class HighlightableElement extends superClass {\n      // Adds some styles...\n      static styles = [\n        (superClass as unknown as typeof LitElement).styles ?? [],\n        css`.highlight { background: yellow; }`\n      ];\n\n      // ...a public `highlight` property/attribute...\n      @property({type: Boolean}) highlight = false;\n\n      // ...and a helper render method:\n      renderHighlight(content: unknown) {\n        return html`\n          <div class=${classMap({highlight: this.highlight})}>\n            ${content}\n          </div>`;\n        }\n      }\n      return HighlightableElement as Constructor<HighlightableInterface> & T;\n    };\n"},"element-one.ts":{"content":"import {LitElement, html} from 'lit';\nimport {customElement} from 'lit/decorators.js';\nimport {Highlightable} from './highlightable.js'\n\n@customElement('element-one')\nexport class ElementOne extends Highlightable(LitElement) {\n  render(){\n    return this.renderHighlight(html`<p>Simple highlight</p>`);\n  }\n}\n"},"element-two.ts":{"content":"import {LitElement, html, css} from 'lit';\nimport {customElement} from 'lit/decorators.js';\nimport {Highlightable} from './highlightable.js'\n\nconst HighlightableLitElement = Highlightable(LitElement);\n\n@customElement('element-two')\nexport class ElementTwo extends HighlightableLitElement {\n  static styles = [\n    HighlightableLitElement.styles || [],\n    css`:host { display: block; }`\n  ];\n  render(){\n    return this.renderHighlight(html`\n      <label>\n        <input type=\"checkbox\"\n          .checked=${this.highlight}\n          @change=${this.toggleHighlight}>\n        Toggleable highlight\n      </label>\n    `);\n  }\n  private toggleHighlight(event: Event) {\n    this.highlight = (event.target as HTMLInputElement).checked;\n  }\n}\n"},"index.html":{"content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <script type=\"module\" src=\"./element-one.js\"></script>\n  <script type=\"module\" src=\"./element-two.js\"></script>\n  <title>lit-element code sample</title>\n</head>\n<body>\n  <element-one highlight></element-one>\n  <element-two></element-two>\n</body>\n</html>\n"}}}