{"extends":"/samples/base.json","title":"live directive","description":"Demo exploring use of the live directive.","section":"Directives","files":{"my-element.ts":{"content":"import {LitElement, html} from 'lit';\nimport {customElement, state, query} from 'lit/decorators.js';\nimport {live} from 'lit/directives/live.js';\n\n@customElement('my-element')\nclass MyElement extends LitElement {\n\n  @state()\n  private data = {value: 'test'};\n\n  @query('input#value')\n  private input!: HTMLInputElement;\n\n  render() {\n\n    return html`\n      <h3>live directive example</h3>\n\n      Set this value to the inputs below.<br>\n      <input id=\"value\" .value=${this.data.value}>\n      <button @click=${this.commitValue}>Commit</button><hr>\n\n      With live: will update if out of sync with last rendered value<br>\n      <input .value=${live(this.data.value)} placeholder=\"type here, click commit\"><hr>\n\n      Without live: will not update if out of sync with last rendered value<br>\n      <input .value=${this.data.value} placeholder=\"type here, click commit\">\n    `;\n  }\n\n  private commitValue() {\n    this.data = {...this.data, value: this.input.value};\n  }\n}\n"},"index.html":{"content":"<style>\n  body { font-family: sans-serif; }\n</style>\n\n<script type=\"module\" src=\"./my-element.js\"></script>\n\n<my-element></my-element>\n"}}}