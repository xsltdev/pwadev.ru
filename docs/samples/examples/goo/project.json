{"hide":true,"extends":"/samples/base.json","title":"LitElement Goo / React Hooks","description":"An example of how to achieve hooks-like \"chaining\" of reactive values through several stateful transforms using a \"controller\" pattern.","section":"Specific Solutions","files":{"goo-element.js":{"content":"import { LitElement, html, css } from 'lit';\nimport { styleMap } from 'lit/directives/style-map.js';\n\nimport { styles } from './styles.css.js';\nimport { SpringController2D } from './spring-controller.js';\nimport { MouseController } from './mouse-controller.js';\n\nconst slow = {\n  stiffness: 400,\n  damping: 500,\n  mass: 10\n};\n\nconst fast = {\n  stiffness: 1200,\n  damping: 400\n};\n\nconst positionStyle = ([x, y]) =>\n  styleMap({\n    transform: `translate3d(${x}px,${y}px,0) translate3d(-50%,-50%,0)`\n  });\n\n/**\n * An example of how to acheive hooks-like \"chaining\" of reactive values through\n * several stateful transforms using a \"controller\" pattern.\n *\n * Ported from the React Goo demo here:\n * https://codesandbox.io/s/ppxnl191zx?from-embed=&file=/src/index.js\n *\n * Controllers are stateful and have a reference to the host allowing them to\n * trigger a re-render. LitElement doesn't have many APIs for externally hooking\n * its lifecycle, but those could be added in the future or by a mixin.\n *\n * Since controllers are stateful, they will typically be stored as instance fields\n * on the host. This is similar to useState, but in very vanilla class-based JS,\n * and without the weight or cost of a hooks system. Note that no garbage closures\n * or objects (aside from the data itself) are created during renders. The shape\n * of all the state is statically knowable, so VMs can allocate the appropriate\n * slots for fields on instance creation.\n */\nclass GooElement extends LitElement {\n  static styles = styles;\n\n  _mouse = new MouseController(this);\n  _spring1 = new SpringController2D(this, fast);\n  _spring2 = new SpringController2D(this, slow);\n  _spring3 = new SpringController2D(this, slow);\n\n  render() {\n    // This is the chain of updates starting with the current mouse position and\n    // flowing through each spring\n    this._spring1.pos = this._mouse.pos;\n    this._spring2.pos = this._spring1.currentValue;\n    this._spring3.pos = this._spring2.currentValue;\n\n    return html`\n      <svg style=\"position: absolute; width: 0; height: 0\">\n        <filter id=\"goo\">\n          <feGaussianBlur in=\"SourceGraphic\" result=\"blur\" stdDeviation=\"30\" />\n          <feColorMatrix\n            in=\"blur\"\n            values=\"1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 30 -7\"\n          />\n        </filter>\n      </svg>\n      <div class=\"hooks-main\">\n        <div class=\"hooks-filter\">\n          <div\n            class=\"b1\"\n            style=${positionStyle(this._spring3.currentValue)}\n          ></div>\n          <div\n            class=\"b2\"\n            style=${positionStyle(this._spring2.currentValue)}\n          ></div>\n          <div\n            class=\"b3\"\n            style=${positionStyle(this._spring1.currentValue)}\n          ></div>\n        </div>\n      </div>\n    `;\n  }\n}\ncustomElements.define(\"goo-element\", GooElement);\n"},"mouse-controller.js":{"content":"export class MouseController {\n  host;\n  pos = [0, 0];\n\n  _onMouseMove = ({clientX, clientY}) => {\n    this.pos = [clientX, clientY];\n    this.host.requestUpdate();\n  };\n\n  constructor(host) {\n    (this.host = host).addController(host);\n  }\n\n  hostConnected() {\n    window.addEventListener('mousemove', this._onMouseMove);\n  }\n\n  hostDisconnected() {\n    window.removeEventListener('mousemove', this._onMouseMove);\n  }\n}\n"},"spring-controller.js":{"content":"import {Spring} from 'wobble/dist/wobble.es.js';\n\nexport class SpringController2D {\n  xSpring;\n  ySpring;\n\n  constructor(host, options) {\n    this.host = host;\n\n    this.xSpring = new Spring({\n      ...options,\n      toValue: options.pos && options.pos[0],\n    });\n    this.xSpring.onUpdate((s) => {\n      this.host.requestUpdate();\n    });\n\n    this.ySpring = new Spring({\n      ...options,\n      toValue: options.pos && options.pos[1],\n    });\n    this.ySpring.start();\n    this.ySpring.onUpdate((s) => {\n      this.host.requestUpdate();\n    });\n  }\n\n  get currentValue() {\n    return [this.xSpring.currentValue, this.ySpring.currentValue];\n  }\n\n  get pos() {\n    return [this.xSpring.toValue, this.ySpring.toValue];\n  }\n\n  set pos([x, y]) {\n    this.xSpring.updateConfig({toValue: x});\n    this.xSpring.start();\n\n    this.ySpring.updateConfig({toValue: y});\n    this.ySpring.start();\n  }\n}\n"},"index.html":{"content":"<!doctype html>\n<head>\n  <script type=\"module\" src=\"./goo-element.js\"></script>\n  <link rel=\"stylesheet\" href=\"./styles.css\">\n</head>\n<body>\n  <goo-element></goo-element>\n</body>\n"},"styles.css":{"content":"html,\nbody,\n#root {\n  width: 100%;\n  height: 100%;\n  margin: 0;\n  padding: 0;\n  background-color: white;\n}\n\nbody {\n  font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, helvetica neue, helvetica,\n    ubuntu, roboto, noto, segoe ui, arial, sans-serif;\n  background: transparent;\n  user-select: none;\n  cursor: default;\n}\n\ngoo-element {\n  height: 100%;\n}\n"},"styles.css.js":{"content":"import {css} from 'lit';\n\nexport const styles = css`\n    :host {\n      font-family: Arial, 'sans serif';\n      display: block;\n    }\n    .hooks-main {\n      width: 100%;\n      height: 100%;\n      background: lightblue;\n      overflow: hidden;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n    }\n\n    .b1,\n    .b2,\n    .b3 {\n      position: absolute;\n      will-change: transform;\n      border-radius: 50%;\n      background: lightcoral;\n      box-shadow: 10px 10px 5px 0px rgba(0, 0, 0, 0.75);\n      opacity: 0.6;\n    }\n\n    .b1 {\n      width: 170px;\n      height: 170px;\n    }\n\n    .b2 {\n      width: 350px;\n      height: 350px;\n    }\n\n    .b3 {\n      width: 200px;\n      height: 200px;\n    }\n\n    .b1::after,\n    .b2::after,\n    .b3::after {\n      content: '';\n      position: absolute;\n      top: 50px;\n      left: 50px;\n      width: 50px;\n      height: 50px;\n      border-radius: 50%;\n      background: rgba(255, 255, 255, 0.8);\n    }\n\n    .b2::after {\n      top: 70px;\n      left: 70px;\n      width: 70px;\n      height: 70px;\n    }\n\n    .b3::after {\n      top: 50px;\n      left: 50px;\n      width: 50px;\n      height: 50px;\n    }\n\n    .hooks-filter {\n      position: absolute;\n      width: 100%;\n      height: 100%;\n      filter: url('#goo');\n      overflow: hidden;\n    }\n  `;\n"}}}