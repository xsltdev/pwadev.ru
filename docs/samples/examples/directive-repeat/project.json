{"extends":"/samples/base.json","title":"repeat directive","description":"Demo exploring use of the repeat directive.","section":"Directives","files":{"my-element.ts":{"content":"import {LitElement, html} from 'lit';\nimport {customElement, state, query} from 'lit/decorators.js';\nimport {repeat} from 'lit/directives/repeat.js';\n\n@customElement('my-element')\nclass MyElement extends LitElement {\n\n  @state()\n  private items = [\n    {id: 0, name: \"Justin\"},\n    {id: 1, name: \"Steve\"},\n    {id: 2, name: \"Kevin\"},\n    {id: 3, name: \"Russell\"},\n    {id: 4, name: \"Liz\"},\n    {id: 5, name: \"Peter\"},\n  ];\n\n  render() {\n    return html`\n      <h3>repeat directive example</h3>\n\n      <button @click=${() => this.sort(1)}>Sort ascending</button>\n      <button @click=${() => this.sort(-1)}>Sort descending</button><hr>\n\n      With keying (DOM including checkbox state moves with items):\n      <ul>\n        ${repeat(this.items, (item) => item.id, (item, index) => html`\n          <li>${index}: <label><input type=\"checkbox\">${item.name}</label></li>`)}\n      </ul><hr>\n\n      Without keying (items are re-used in place, checkbox state does not change):\n      <ul>\n        ${repeat(this.items, (item, index) => html`\n          <li>${index}: <label><input type=\"checkbox\">${item.name}</label></li>`)}\n      </ul>\n\n    `;\n  }\n\n  private sort(dir: number) {\n    this.items = [...this.items.sort((a, b) => a.name.localeCompare(b.name) * dir)];\n  }\n}\n"},"index.html":{"content":"<style>\n  body { font-family: sans-serif; }\n</style>\n\n<script type=\"module\" src=\"./my-element.js\"></script>\n\n<my-element></my-element>\n"}}}