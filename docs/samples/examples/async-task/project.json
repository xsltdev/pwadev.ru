{"extends":"/samples/base.json","title":"Async Tasks","description":"Shows an example of an async Task controller. This one fetches npm package info and renders based on the state of the fetch.","section":"Managing Data","files":{"npm-info.ts":{"content":"import {LitElement, css, html} from 'lit';\nimport {customElement, state} from 'lit/decorators.js';\nimport {map} from 'lit/directives/map.js';\nimport {Task, initialState} from '@lit/task';\nimport {fetchPackageInfo} from './npm.js';\n\n@customElement('npm-info')\nexport class NpmInfo extends LitElement {\n  @state()\n  private _packageName = 'lit';\n\n  /*\n   * This is the async Task that fetches data from npm.\n   *\n   * The current state of the task is rendered below with\n   * `this._npmInfoTask.render()`.\n   */\n  private _npmInfoTask = new Task(this, {\n    task: async ([pkgName], {signal}) => {\n      if (pkgName === undefined || pkgName === '') {\n        // This puts the task back into the INITIAL state\n        return initialState;\n      }\n      return await fetchPackageInfo(pkgName, signal);\n    },\n    args: () => [this._packageName],\n  });\n\n  render() {\n    return html`\n      <label>\n        Enter a package name:\n        <input .value=${this._packageName} @change=${this._onChange} />\n      </label>\n      <header>\n        <h1>${this._packageName}</h1>\n        <img\n          id=\"logo\"\n          src=\"https://raw.githubusercontent.com/npm/logos/master/npm%20logo/npm-logo-red.svg\"\n          alt=\"npm logo\"\n        />\n      </header>\n      <div>\n        ${this._npmInfoTask.render({\n          initial: () =>\n            html`<span class=\"initial\">\n              Enter a package name to display its npm info\n            </span>`,\n          pending: () =>\n            html`Loading npm info for <code>${this._packageName}</code>`,\n          complete: (pkg) => html`\n            <h3>${pkg.description}</h3>\n            <h4>dist-tags:</h4>\n            <ul>\n              ${map(\n                Object.entries(pkg['dist-tags']),\n                ([tag, version]) => html`<li><pre>${tag}: ${version}</pre></li>`\n              )}\n            </ul>\n          `,\n          error: (e) => html`<span class=\"error\">\n            Error: ${(e as Error).message}\n              </span>`,\n        })}\n      </div>\n    `;\n  }\n\n  private _onChange(e: Event) {\n    this._packageName = (e.target as HTMLInputElement).value;\n  }\n\n  static styles = css`\n    :host {\n      display: block;\n      min-width: 300px;\n      border-radius: 5px;\n      border: solid 1px #aaa;\n      padding: 20px;\n    }\n    header {\n      display: flex;\n      flex-direction: row;\n      align-items: center;\n      justify-content: space-between;\n    }\n    #logo {\n      height: 38px;\n      width: auto;\n    }\n    .initial {\n      font-style: italic;\n    }\n    .error {\n      color: red;\n    }\n  `;\n}\n"},"npm.ts":{"content":"export interface NpmPackage {\n  description: string;\n  ['dist-tags']: {[tag: string]: string};\n}\n\nexport const fetchPackageInfo = async (\n  pkgName: string,\n  signal: AbortSignal\n): Promise<NpmPackage> => {\n  // Artificial delay for demo purposes\n  await new Promise((r) => setTimeout(r, 1000));\n  const response = await fetch(`https://registry.npmjs.org/${pkgName}`, {\n    signal,\n  });\n  if (response.status === 200) {\n    return response.json();\n  } else {\n    throw response.text();\n  }\n};\n"},"index.html":{"content":"<style>\n  body { font-family: sans-serif; }\n</style>\n\n<script type=\"module\" src=\"./npm-info.js\"></script>\n\n<body>\n  <npm-info></npm-info>\n</body>\n"}}}