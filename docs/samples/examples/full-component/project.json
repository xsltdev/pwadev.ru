{"extends":"/samples/base.json","title":"Full component","description":"Basic example of a Lit component, using TypeScript.","section":"Basics","files":{"my-element.ts":{"content":"import {LitElement, html, css} from 'lit';\nimport {customElement, property} from 'lit/decorators.js';\n\n@customElement(\"my-element\")\nexport class MyElement extends LitElement {\n  // Styles are scoped to this element: they won't conflict with styles\n  // on the main page or in other components. Styling API can be exposed\n  // via CSS custom properties.\n  static styles = css`\n    :host {\n      display: inline-block;\n      padding: 10px;\n      background: lightgray;\n    }\n    .planet {\n      color: var(--planet-color, blue);\n    }\n  `;\n\n\n  // Define reactive properties--updating a reactive property causes\n  // the component to update.\n  @property() greeting = \"Hello\";\n  @property() planet = \"World\";\n\n  // The render() method is called any time reactive properties change.\n  // Return HTML in a string template literal tagged with the `html`\n  // tag function to describe the component's internal DOM.\n  // Expressions can set attribute values, property values, event handlers,\n  // and child nodes/text.\n  render() {\n    return html`\n      <span @click=${this.togglePlanet}\n        >${this.greeting}\n        <span class=\"planet\">${this.planet}</span>\n      </span>\n    `;\n  }\n\n  // Event handlers can update the state of @properties on the element\n  // instance, causing it to re-render\n  togglePlanet() {\n    this.planet = this.planet === \"World\" ? \"Mars\" : \"World\";\n  }\n}\n"},"index.html":{"content":"<!DOCTYPE html>\n<head>\n  <script type=\"module\" src=\"./my-element.js\"></script>\n  <style>\n    .mars {\n      --planet-color: red;\n    }\n  </style>\n</head>\n<body>\n  <my-element></my-element>\n  <hr />\n  <my-element class=\"mars\" planet=\"Mars\"></my-element>\n</body>\n"}}}