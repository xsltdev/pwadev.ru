{"extends":"/samples/base.json","title":"guard directive","description":"Demo exploring use of the guard directive.","section":"Directives","files":{"my-element.ts":{"content":"import {LitElement, html} from 'lit';\nimport {customElement, state, query} from 'lit/decorators.js';\nimport {guard} from 'lit/directives/guard.js';\nimport {calculateSHA} from './calculate-sha.js';\n\n@customElement('my-element')\nexport class MyElement extends LitElement {\n\n  @state()\n  private value: string = 'test string';\n\n  @state()\n  private counter: number = 0;\n\n  @query('input#value')\n  private input!: HTMLInputElement;\n\n  render() {\n    return html`\n      <h3>guard directive example</h3>\n\n      <input id=\"value\" .value=${this.value}>\n      <button @click=${this.updateValue}>Calculate</button><br>\n\n      The SHA for '${this.value}' is:\n      <div>${guard([this.value], () => calculateSHA(this.value))}</div>\n      <hr>\n\n      Incrementing the counter does not recalculate SHA:<br>\n      <button @click=${this.incrementCounter}>Increment: ${this.counter}</button>\n    `;\n  }\n\n  private updateValue() {\n    this.value = this.input.value;\n  }\n\n  private incrementCounter() {\n    this.counter++;\n  }\n}\n"},"calculate-sha.ts":{"content":"import {until} from 'lit/directives/until.js';\n\n// From https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/digest\nasync function sha256(message: string) {\n  const msgBuffer = new TextEncoder().encode(message);\n  const hashBuffer = await crypto.subtle.digest('SHA-256', msgBuffer);\n  const hashArray = Array.from(new Uint8Array(hashBuffer));\n  const hashHex = hashArray.map(b => ('00' + b.toString(16)).slice(-2)).join('');\n  // Add some artificial delay for demo purposes...\n  await new Promise<void>((r) => setTimeout(() => r(), 1000));\n  return hashHex;\n}\n\nexport const calculateSHA = (value: string) => {\n  return until(sha256(value), 'Calculating sha...');\n}\n"},"index.html":{"content":"<style>\n  body { font-family: sans-serif; }\n</style>\n\n<script type=\"module\" src=\"./my-element.js\"></script>\n\n<my-element></my-element>\n"}}}