{"extends":"/samples/base.json","title":"cache directive","description":"Demo exploring use of the cache directive.","section":"Directives","files":{"my-element.ts":{"content":"import {LitElement, html} from 'lit';\nimport {customElement, property} from 'lit/decorators.js';\nimport {cache} from 'lit/directives/cache.js';\n\nconst view1 = () => html`View 1: <input value=\"edit me then toggle\">`;\nconst view2 = () => html`View 2: <input value=\"edit me then toggle\">`;\n\n@customElement('my-element')\nexport class MyElement extends LitElement {\n\n  @property({type: Number})\n  selectedView = 1;\n\n  render() {\n    return html`\n      <h3>cache directive example</h3>\n\n      <button @click=${this.toggleView}>Toggle View</button><hr>\n\n      Un-cached (DOM re-created when template re-rendered):<br>\n      ${this.selectedView == 1 ? view1() : view2()}<hr>\n\n      Cached (DOM cached and re-used when template re-rendered):<br>\n      ${cache(this.selectedView == 1 ? view1() : view2())}\n    `;\n  }\n\n  private toggleView() {\n    this.selectedView = this.selectedView === 1 ? 2 : 1;\n  }\n}\n"},"index.html":{"content":"<style>\n  body { font-family: sans-serif; }\n</style>\n\n<script type=\"module\" src=\"./my-element.js\"></script>\n\n<my-element></my-element>\n"}}}